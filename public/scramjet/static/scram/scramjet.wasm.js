//Custom scramjet.wasm.js (I have no fucking clue what im doing and found half of this on sourceforge help)
const wasmCode = new Uint8Array([
  0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0a, 0x02, 0x60,
  0x02, 0x7f, 0x7f, 0x01, 0x7f, 0x60, 0x01, 0x7f, 0x00, 0x02, 0x13, 0x01,
  0x03, 0x65, 0x6e, 0x76, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x02,
  0x00, 0x01, 0x03, 0x02, 0x01, 0x00, 0x07, 0x0a, 0x01, 0x06, 0x5f, 0x73,
  0x74, 0x61, 0x72, 0x74, 0x00, 0x01, 0x0a, 0x2a, 0x01, 0x28, 0x01, 0x01,
  0x7f, 0x41, 0x00, 0x21, 0x00, 0x03, 0x40, 0x20, 0x00, 0x20, 0x01, 0x6a,
  0x2d, 0x00, 0x00, 0x20, 0x02, 0x71, 0x20, 0x00, 0x20, 0x01, 0x6a, 0x36,
  0x00, 0x00, 0x20, 0x00, 0x41, 0x01, 0x6a, 0x21, 0x00, 0x20, 0x00, 0x20,
  0x03, 0x48, 0x0d, 0x00, 0x0b, 0x0b
]);

let wasmInstance;

export async function init() {
  if (wasmInstance) return;
  const module = await WebAssembly.compile(wasmCode);
  wasmInstance = await WebAssembly.instantiate(module, {
    env: { memory: new WebAssembly.Memory({ initial: 1 }) }
  });
}

export function xorObfuscate(data, key = 0x42) {
  if (!wasmInstance) throw new Error("Call init() first!");
  const mem = new Uint8Array(wasmInstance.exports.memory.buffer);
  const ptr = wasmInstance.exports._start();
  mem.set(new Uint8Array(data), ptr);
  wasmInstance.exports.process(ptr, data.length, key);
  return mem.slice(ptr, ptr + data.length);
}
